apiVersion: v1
kind: Secret
metadata:
  name: pg-secret
type: Opaque
stringData:
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_DB: "votes"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels: { app: redis }
  template:
    metadata:
      labels: { app: redis }
    spec:
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector: { app: redis }
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels: { app: db }
  template:
    metadata:
      labels: { app: db }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: pgdata
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: db
spec:
  selector: { app: db }
  ports:
    - port: 5432
      targetPort: 5432
---
# One-off Job to create the votes table before app starts using it
apiVersion: batch/v1
kind: Job
metadata:
  name: db-migrate
spec:
  backoffLimit: 6
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: migrate
          image: postgres:16
          env:
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
          command: ["/bin/sh","-c"]
          args:
            - >-
              until pg_isready -h db -U "$POSTGRES_USER" -d "$POSTGRES_DB"; do
                echo 'Waiting for Postgres...'; sleep 1; done;
              echo 'Running migration...';
              export PGPASSWORD="$POSTGRES_PASSWORD";
              psql -h db -U "$POSTGRES_USER" -d "$POSTGRES_DB" -v ON_ERROR_STOP=1 -c
              "CREATE TABLE IF NOT EXISTS votes (
                  id   VARCHAR(255) PRIMARY KEY,
                  vote VARCHAR(1)   NOT NULL CHECK (vote IN ('a','b'))
                );";
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vote
spec:
  replicas: 1
  selector:
    matchLabels: { app: vote }
  template:
    metadata:
      labels: { app: vote }
    spec:
      containers:
        - name: vote
          # Option A (simple): use public sample image
          image: dockersamples/examplevotingapp_vote:before
          # Option B (your own image): replace with your image URL later
          env:
            - name: REDIS_HOST
              value: redis
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: vote
spec:
  type: NodePort
  selector: { app: vote }
  ports:
    - port: 5000
      targetPort: 80
      nodePort: 30050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
spec:
  replicas: 1
  selector:
    matchLabels: { app: worker }
  template:
    metadata:
      labels: { app: worker }
    spec:
      containers:
        - name: worker
          image: dockersamples/examplevotingapp_worker
          env:
            - name: REDIS_HOST
              value: redis
            - name: POSTGRES_HOST
              value: db
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: result
spec:
  replicas: 1
  selector:
    matchLabels: { app: result }
  template:
    metadata:
      labels: { app: result }
    spec:
      containers:
        - name: result
          image: dockersamples/examplevotingapp_result:before
          env:
            - name: POSTGRES_HOST
              value: db
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_PASSWORD } }
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: pg-secret, key: POSTGRES_DB } }
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: result
spec:
  type: NodePort
  selector: { app: result }
  ports:
    - port: 5001
      targetPort: 80
      nodePort: 30051